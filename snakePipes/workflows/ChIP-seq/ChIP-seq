#!/usr/bin/env python3

__description__ = """
MPI-IE workflow for ChIP-seq analysis

Usage example:
    ChIP-seq -d working-dir mm10 samples.yaml
"""

import argparse
import os
import sys
import textwrap
import snakePipes.common_functions as cf
import snakePipes.parserCommon as parserCommon


def parse_args(defaults={"verbose": False, "configfile": None, "cluster_configfile": None, "max_jobs": 5, "snakemake_options": "--use-conda", "tempdir": None,
                         "paired": True, "bw_binsize": 25, "sample_info": "", "window_size": 150, "predict_chip_dict": False}):
    """
    Parse arguments from the command line.
    """
    mainArgs = parserCommon.mainArguments(defaults, workingDir=True)

    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(__description__),
        parents=[mainArgs],
        add_help=False
    )

    parser.add_argument("samples_config", nargs='?', metavar="SAMPLESCONFIG", help="configuration file (eg. 'example.chip_samples.yaml') with sample annotation")


    # Workflow options
    optional = parser.add_argument_group('Options')
    optional.add_argument("--single-end",
                          dest="paired",
                          action="store_false",
                          help="input data is single-end, not paired-end",
                          default=defaults["paired"])

    optional.add_argument("--bw-binsize",
                          dest="bw_binsize",
                          metavar="INT",
                          help="bin size of output files in bigWig format (default: '%(default)s')",
                          type=int,
                          default=defaults["bw_binsize"])

    optional.add_argument("--DB",
                          dest="sample_info",
                          help="Information on samples (If differential binding analysis required); see "
                               "'snakepipes/shared/tools/sampleInfo.example.tsv' for example. "
                               "IMPORTANT: The first entry defines which group of samples are control. "
                               "By this, the order of comparison and likewise the sign of values can be changed! "
                               "Also, the condition `control` should only be used for input samples (control peaks "
                               "are not evaluated for differential binding) (default: '%(default)s')",
                          default=defaults["sample_info"])

    optional.add_argument("--DB_windowSize",
                          dest="window_size",
                          help="Window size to counts reads in (If differential binding analysis required); "
                               "Default size is suitable for most transcription factors and sharp histone marks. "
                               "Small window sizes (~20bp) should be used for very narrow transcription factor peaks, "
                               "while large window sizes (~500 bp) should be used for broad marks (eg. H3K27me3) "
                               "(default: '%(default)s')",
                          default=defaults["window_size"])
    
    optional.add_argument("--predict_chip_dict",
                          dest="predict_chip_dict",
                          action="store_true",
                          help="Use existing bam files to predict a chip-seq sample configuration file. Write it to the workingdir")

    return parser


def main():
    baseDir, workflowDir, defaults = cf.setDefaults(os.path.basename(__file__))

    # get command line arguments
    parser = parse_args(defaults)
    args = parser.parse_args()

    # we also add these paths to config, although we don't use them in the Snakefile
    args.baseDir = baseDir

    # Common arguments
    cf.checkCommonArguments(args, baseDir)

    # Local argument checks
    if args.predict_chip_dict:
        cf.predict_chip_dict(args.workingdir)

    if args.samples_config is not None and os.path.exists(os.path.abspath(args.samples_config)):
        args.samples_config = os.path.abspath(args.samples_config)
    else:
        sys.exit("\nError! Sample config file not found! ({})\n Either create one or call the workflow with --predict_chip_dict!\n".format(args.samples_config))

    # Handle YAML and log files
    snakemake_cmd = cf.commonYAMLandLogs(baseDir, workflowDir, defaults, args, __file__)
    snakemake_exports, logfile_name, temp_path = cf.logAndExport(args, os.path.basename(__file__))

    cmd = " ".join(snakemake_exports + snakemake_cmd)

    # Run everything
    cf.runAndCleanup(args, cmd, logfile_name, temp_path)


if __name__ == "__main__":
    main()
