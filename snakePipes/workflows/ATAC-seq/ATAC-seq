#!/usr/bin/env python3

__description__ = """
MPI-IE workflow for ATAC-seq Analysis

usage example:
    ATAC-seq -d working-dir mm10 samples.yaml
"""

import argparse
import os
import sys
import textwrap
import snakePipes.common_functions as cf
import snakePipes.parserCommon as parserCommon


def parse_args(defaults={"verbose": False, "configfile": None, "cluster_configfile": None, "max_jobs": 5, "snakemake_options": "--use-conda", "tempdir": None,
                         "bw_binsize": 25, "atac_fragment_cutoff": 150, "sample_info": None}):
    """
    Parse arguments from the command line.
    """
    mainArgs = parserCommon.mainArguments(defaults, workingDir=True)

    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(__description__),
        parents=[mainArgs],
        add_help=False
    )

    # Workflow options
    optional = parser.add_argument_group('Options')
    optional.add_argument("--bw-binsize",
                          dest="bw_binsize",
                          metavar="INT",
                          help="bin size of output files in bigWig format (default: '%(default)s')",
                          type=int,
                          default=defaults["bw_binsize"])

    optional.add_argument("--atac-fragment-cutoff",
                          dest="atac_fragment_cutoff",
                          metavar="INT",
                          help="Size threshold for filtering of nucleosomal fragments(default: '%(default)s')",
                          type=int,
                          default=defaults['atac_fragment_cutoff'])

    optional.add_argument("--DOC",
                          dest="sample_info",
                          help="Information on samples (If differential binding analysis required); see "
                               "'snakepipes/shared/tools/sampleInfo.example.tsv' for example. "
                               "IMPORTANT: The first entry defines which group of samples are control. "
                               "By this, the order of comparison and likewise the sign of values can be changed! "
                               "Also, the condition `control` should not be used (reserved to mark input samples "
                               "in the ChIP-Seq workflow (default: '%(default)s')",
                          default=defaults["sample_info"])

    return parser


def main():
    baseDir, workflowDir, defaults = cf.setDefaults(os.path.basename(__file__))

    # get command line arguments
    parser = parse_args(defaults)
    args = parser.parse_args()

    # we also add these paths to config, although we don't use them in the Snakefile
    args.baseDir = baseDir

    # Common arguments
    cf.checkCommonArguments(args, baseDir)

    # Handle YAML and log files
    snakemake_cmd = cf.commonYAMLandLogs(baseDir, workflowDir, defaults, args, __file__)
    snakemake_exports, logfile_name, temp_path = cf.logAndExport(args, os.path.basename(__file__))

    cmd = " ".join(snakemake_exports + snakemake_cmd)

    # Run everything
    cf.runAndCleanup(args, cmd, logfile_name, temp_path)


if __name__ == "__main__":
    main()
