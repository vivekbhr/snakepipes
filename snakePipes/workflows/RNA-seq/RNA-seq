#!/usr/bin/env python3

__description__ = """
MPI-IE workflow for RNA mapping and analysis

usage example:
    RNA-seq -i input-dir -o output-dir mm10
"""


import argparse
import os
import sys
import textwrap
import snakePipes.common_functions as cf
import snakePipes.parserCommon as parserCommon


def parse_args(defaults={"verbose": False, "configfile": None, "cluster_configfile": None, "max_jobs": 5, "snakemake_options": "--use-conda", "tempdir": None,
                         "mode": "alignment-free,deepTools_qc", "downsample": False, "trim": False, "trim_prg": "cutadapt", "trim_options": None, "fastqc": False,
                         "library_type": 2, "mapping_prg": "STAR", "star_options": "--outBAMsortingBinsN 100", "hisat_options": None, "salmon_index_options": "--type quasi -k 31",
                         "featurecounts_options": "-C -Q 10 --primary", "filter_annotation": None, "sample_info": None,
                         "bw_binsize": 25, "dnaContam": False, "plot_format": "png"}):
    """
    Parse arguments from the command line.
    """
    mainArgs = parserCommon.mainArguments(defaults, workingDir=False)
    snpArgs = parserCommon.snpArguments(defaults)

    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(__description__),
        parents=[mainArgs, snpArgs],
        add_help=False
    )

    # Workflow options
    optional = parser.add_argument_group('Options')
    optional.add_argument("-m", "--mode",
                          dest="mode",
                          help="workflow running modes (available: 'alignment-free, alignment, allelic-mapping, deepTools_qc')"
                          " (default: '%(default)s')",
                          default=defaults["mode"])

    parserCommon.commonOptions(optional, defaults, bw=True)

    optional.add_argument("--library_type",
                          dest="library_type",
                          metavar="",
                          help="user provided library type strand specificity. featurCounts style: 0, 1, 2 (Illumina TruSeq); default: '%(default)s')",
                          type=int,
                          default=defaults["library_type"])

    optional.add_argument("--mapping_prg",
                          dest="mapping_prg",
                          metavar="STR",
                          help="Program used for mapping: STAR or HISAT2 (default: '%(default)s')",
                          type=str,
                          default=defaults["mapping_prg"])

    optional.add_argument("--star_options",
                          dest="star_options",
                          metavar="STR",
                          help="STAR option string, e.g.: '--twopassMode Basic' (default: '%(default)s')",
                          type=str,
                          default=defaults["star_options"])

    optional.add_argument("--hisat_options",
                          dest="hisat_options",
                          metavar="STR",
                          help="HISAT2 option string (default: '%(default)s')",
                          type=str,
                          default=defaults["hisat_options"])

    optional.add_argument("--salmon_index_options",
                          dest="salmon_index_options",
                          metavar="STR",
                          type=str,
                          help="Salmon index options, e.g. '--type fmd' (default: '%(default)s')",
                          default=defaults["salmon_index_options"])

    optional.add_argument("--featurecounts_options",
                          dest="featurecounts_options",
                          metavar="STR",
                          type=str,
                          help="featureCounts option string. The options '-p -B'"
                               " are always used for paired-end data (default: '%(default)s')",
                          default=defaults["featurecounts_options"])

    optional.add_argument("--filter_annotation",
                          dest="filter_annotation",
                          metavar="STR",
                          type=str,
                          help="filter annotation GTF by grep for use with Salmon, e.g."
                               " use --filter_annotation='-v pseudogene'; default: '%(default)s')",
                          default=defaults["filter_annotation"])

    optional.add_argument("--DE",
                          dest="sample_info",
                          help="Information on samples (required for DE analysis); see "
                               "'snakemake_workflows/shared/tools/sampleInfo.example.tsv' for example."
                               " The column names in the tsv files are 'sample' and 'condition'.The first entry"
                               " defines which group of samples are control. "
                               " This way, the order of comparison and likewise the sign of values can be changed."
                               " The DE analysis might fail if your sample names begin with a number. So watch out"
                               " for that! (default: '%(default)s')",
                          default=defaults["sample_info"])

    optional.add_argument("--dnaContam",
                          action="store_true",
                          help="Returns a plot which presents the proportion of the intergenic reads (default: '%(default)s')",
                          default=defaults["dnaContam"])

    return parser


def main():
    baseDir, workflowDir, defaults = cf.setDefaults(os.path.basename(__file__))

    # get command line arguments
    parser = parse_args(defaults)
    args = parser.parse_args()

    # we also add these paths to config, although we don't use them in the Snakefile
    args.baseDir = baseDir

    # Common arguments
    cf.checkCommonArguments(args, baseDir, outDir=True)

    ## Begin workflow-specific checks
    # check for Allele-specific mapping mode
    args.allele_mode = cf.checkAlleleParams(args)
    # convert file path to abspath
    if args.allele_mode == "create_and_map":
        args.VCFfile = os.path.abspath(args.VCFfile)
    elif args.allele_mode == "map_only":
        args.SNPfile = os.path.abspath(args.SNPfile)
        args.Nmasked_index = os.path.abspath(args.Nmasked_index)
    modeTemp = args.mode.split(",")
    # deeptools_qc requires alignment as input
    if "deeptools_qc" in modeTemp and "alignment" not in modeTemp:
        args.mode = "{},alignment".format(args.mode)
    ## End workflow-specific checks

    # Handle YAML and log files
    snakemake_cmd = cf.commonYAMLandLogs(baseDir, workflowDir, defaults, args, __file__)
    snakemake_exports, logfile_name, temp_path = cf.logAndExport(args, os.path.basename(__file__))

    cmd = " ".join(snakemake_exports + snakemake_cmd)

    # Run everything
    cf.runAndCleanup(args, cmd, logfile_name, temp_path)


if __name__ == "__main__":
    main()
