#!/usr/bin/env python
import sys
import argparse
import subprocess
import snakePipes
import os
import yaml
import glob
import hashlib
import shutil
import snakePipes.common_functions as cof


def parse_arguments():
    parser = argparse.ArgumentParser(description='Setup and information script for snakePipes',
                                     usage='$ snakePipes info')

    subparsers = parser.add_subparsers(title='Commands',
                                       dest='command')

    infoParser = subparsers.add_parser('info',
                                       help='Print the location of the various yaml files')

    createEnvsParser = subparsers.add_parser('createEnvs',
                                             help='Create or update conda enviroments according to the '
                                                  'workflow-specific yaml files. Note that changing the snakemake_options: '
                                                  'option will result in ALL conda environments being recreated.')

    envInfoParser = subparsers.add_parser('envInfo',
                                          help='Prints the location in which each conda environment is actually stored.')

    mex = createEnvsParser.add_mutually_exclusive_group()
    mex.add_argument('--keepCondaDir',
                     action='store_true',
                     help='If specified, the `snakemake_options:` setting in '
                          'the workflow `defaults.yaml` files will NOT be overwritten. '
                          'This is typically unwise and only expert users should specify this.')
    mex.add_argument('--condaDir',
                     help='If specified, use this as the base directory for the '
                          'created conda environments. This will ignore what is already '
                          'in the workflow-specific yaml files and where conda is installed.')

    createEnvsParser.add_argument('--force',
                                  action='store_true',
                                  help='Force creation of conda environments, even if they apparently exist.')

    createEnvsParser.add_argument('--info', '-i',
                                  action='store_true',
                                  help='Only print the environments that would be created, don\'t actually create them.')

    createEnvsParser.add_argument('--skipGATK',
                                  action='store_true',
                                  help='Skip registering GATK')

    createEnvsParser.add_argument('--develop',
                                  action='store_true',
                                  help='Developer mode, this prevents disabling site-packages in the root conda environment')

    return parser


def info():
    """
    Print the locations of EVERY yaml file. Break these up a bit so it's clear what they actually belong to.
    """
    baseDir = os.path.dirname(snakePipes.__file__)

    # Organism yaml files
    print("Organism YAML files:")
    for f in glob.glob(os.path.join(baseDir, "shared/organisms/*.yaml")):
        print("    {}".format(f))

    # defaults.yaml under shared
    print("\nThe workflow-generic defaults.yaml file is:\n    {}".format(os.path.join(baseDir, "shared/defaults.yaml")))

    # cluster.yaml under shared
    print("\nThe default cluster.yaml file. Its defaults are overridden by the per-workflow cluster.yaml files:\n    {}".format(os.path.join(baseDir, "shared/cluster.yaml")))
    print("\nWorkflow-specific cluster.yaml and defaults.yaml files are in:")
    for f in glob.glob(os.path.join(baseDir, "workflows/*/cluster.yaml")):
        print("    {}".format(os.path.dirname(f)))


def envInfo():
    """
    For each environment yaml file print where its conda env is actually located
    """
    baseDir = os.path.dirname(snakePipes.__file__)
    condaDir = subprocess.check_output("which conda", shell=True).decode('utf-8').strip()
    condaDir = os.path.dirname(os.path.dirname(condaDir))
    if "envs" in condaDir:
        condaDir = os.path.dirname(condaDir)
    else:
        condaDir = os.path.join(condaDir, "envs")

    f = open(os.path.join(baseDir, "shared/defaults.yaml"))
    cf = yaml.load(f)
    f.close()

    _ = cf['snakemake_options'].split(" ")
    idx = _.index('--conda-prefix')
    condaEnvDir = _[idx + 1]

    for env in cof.set_env_yamls().values():
        # Hash the file ala snakemake
        md5hash = hashlib.md5()
        md5hash.update(condaEnvDir.encode())
        f = open(os.path.join(baseDir, "shared/rules", env), 'rb')
        md5hash.update(f.read())
        f.close()
        h = md5hash.hexdigest()

        print("{} is in:\n    {}\n".format(env, os.path.join(condaEnvDir, h)))


def registerGATK(gatkEnv):
    URL="https://software.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=3.5-0-g36282e4"
    cmd = ["wget", "-O", "GATK-archive-3.5.tar.bz2", "{}".format(URL)]
    subprocess.check_call(cmd)

    cmd = ["{}/bin/gatk-register".format(gatkEnv), "GATK-archive-3.5.tar.bz2"]
    subprocess.check_call(cmd)
    os.remove("GATK-archive-3.5.tar.bz2")
    shutil.rmtree("/tmp/gatk")


def fixSitePy(envPath):
    """
    We would really like to prevent any snakePipes environment from using the user site packages.
    """
    for fname in glob.glob('{}/lib/python*/site.py'.format(envPath)):
        f = open(fname).read()
        lines = f.split('\n')
        lines = [line if not line.startswith('ENABLE_USER_SITE') else 'ENABLE_USER_SITE = False' for line in lines]
        f = open(fname, "w")
        f.write("\n".join(lines))
        f.close()

        cmd = [os.path.join(envPath, "bin", "python"), '-m', 'compileall', fname]
        subprocess.check_call(cmd)


def fixSnakemake(envPath):
    """
    Fix issue #916 in snakemake. This should eventually be removed before a real release.
    """
    for fname in glob.glob('{}/lib/python*/site-packages/snakemake/script.py'.format(envPath)):
        f = open(fname).read()
        lines = f.split('\n')
        if 'path.startswith' in lines[237]:
            lines[237] = '            if False:'
            f = open(fname, "w")
            f.write("\n".join(lines))
            f.close()

            cmd = [os.path.join(envPath, "bin", "python"), '-m', 'compileall', fname]
            subprocess.check_call(cmd)


def createCondaEnvs(args):
    """
    Create all of the conda environments
    """
    baseDir = os.path.dirname(snakePipes.__file__)

    condaDir = subprocess.check_output("which conda", shell=True).decode('utf-8').strip()
    condaDir = os.path.dirname(os.path.dirname(condaDir))
    rootDir = condaDir
    if "envs" in condaDir:
        condaDir = os.path.dirname(condaDir)
    else:
        condaDir = os.path.join(condaDir, "envs")
    gatkEnv = None

    f = open(os.path.join(baseDir, "shared/defaults.yaml"))
    cf = yaml.load(f)
    f.close()
    _ = cf['snakemake_options'].split(" ")
    try:
        idx = _.index('--conda-prefix')
    except:
        idx = len(_)
        _.extend(['--conda-prefix', condaDir])

    condaEnvDir = _[idx + 1]
    if args.condaDir:
        condaDirUse = args.condaDir
        _[idx + 1] = condaDirUse
    elif args.keepCondaDir:
        condaDirUse = _[idx + 1]
    else:
        condaDirUse = condaDir
        _[idx + 1] = condaDirUse
    cf['snakemake_options'] = ' '.join(_)

    # rewrite defaults.yaml
    cof.write_configfile(os.path.join(baseDir, "shared/defaults.yaml"), cf)

    for env in cof.set_env_yamls().values():
        # Hash the file ala snakemake
        md5hash = hashlib.md5()
        md5hash.update(condaDirUse.encode())
        f = open(os.path.join(baseDir, "shared/rules", env), 'rb')
        md5hash.update(f.read())
        f.close()
        h = md5hash.hexdigest()

        if 'wgbs' in env:
            gatkEnv = os.path.join(condaDirUse, h)

        sys.stderr.write("Creating environment from {} in {}\n".format(os.path.join(baseDir, "shared/rules", env), condaDirUse))
        cmd = ["conda", "env", "create", "--force", "--file", os.path.join(baseDir, "shared/rules", env)]
        if '--conda-prefix' in cf['snakemake_options'] and (args.condaDir or args.keepCondaDir):
            cmd += ["--prefix", os.path.join(condaDirUse, h)]
        else:
            cmd += ["--name", h]

        # Don't actually create the env if either --info is set or it already exists and --force is NOT set
        if not args.info:
            if not os.path.exists(os.path.join(condaDirUse, h)) or args.force:
                os.makedirs(os.path.join(condaDirUse, h), exist_ok=True)
                subprocess.check_call(cmd)

        # Ignore site-packages
        if not args.develop:
            fixSitePy(os.path.join(condaDirUse, h))

    # We can't actually install GATK with conda, which is annoying
    if gatkEnv and not args.skipGATK:
        registerGATK(gatkEnv)

    # Ignore site-packages in this env
    if not args.develop:
        fixSitePy(rootDir)
    fixSnakemake(rootDir)


def main(args):
    args = parse_arguments().parse_args(args)
    if args.command == 'info':
        info()
    elif args.command == 'envInfo':
        envInfo()
    else:
        createCondaEnvs(args)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        sys.argv.append("--help")
    main(sys.argv[1:])
